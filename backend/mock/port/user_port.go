// Code generated by MockGen. DO NOT EDIT.
// Source: port/user_port.go
//
// Generated by this command:
//
//	mockgen -source=port/user_port.go -destination=mock/port/user_port.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"
	domain "task-canvas/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockUserPort is a mock of UserPort interface.
type MockUserPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserPortMockRecorder
	isgomock struct{}
}

// MockUserPortMockRecorder is the mock recorder for MockUserPort.
type MockUserPortMockRecorder struct {
	mock *MockUserPort
}

// NewMockUserPort creates a new mock instance.
func NewMockUserPort(ctrl *gomock.Controller) *MockUserPort {
	mock := &MockUserPort{ctrl: ctrl}
	mock.recorder = &MockUserPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPort) EXPECT() *MockUserPortMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockUserPort) FindByEmail(ctx context.Context, email domain.Email) (*domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserPortMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserPort)(nil).FindByEmail), ctx, email)
}

// FindById mocks base method.
func (m *MockUserPort) FindById(ctx context.Context, userId *domain.UserId) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, userId)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserPortMockRecorder) FindById(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserPort)(nil).FindById), ctx, userId)
}

// Store mocks base method.
func (m *MockUserPort) Store(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockUserPortMockRecorder) Store(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUserPort)(nil).Store), ctx, user)
}
